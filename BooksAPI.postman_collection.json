{
	"info": {
		"_postman_id": "b0d7ab73-d067-476c-9551-83e7f1994811",
		"name": "BooksAPI",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "26215211"
	},
	"item": [
		{
			"name": "Get Status of API",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json();\r",
							"pm.test(\"response body validation\",() =>{\r",
							"\r",
							"pm.expect(jsonData.status).to.eql(\"OK\");\r",
							"});\r",
							"\r",
							"pm.test(\"status code validation\", function() {\r",
							"    pm.expect(pm.response.code).to.eql(200);\r",
							"});\r",
							"pm.test(\"Response time validation\",()=>{\r",
							"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url_books_collect}}/status",
					"host": [
						"{{url_books_collect}}"
					],
					"path": [
						"status"
					]
				}
			},
			"response": []
		},
		{
			"name": "Post Create Token",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"var random = Math.random().toString(30).substring(4);\r",
							"\r",
							"var clientName=\"SD\"+random;\r",
							"var clientEmail=\"SD\"+random+\"@gmail.com\"\r",
							"\r",
							"pm.environment.set(\"clientname_env\",clientName);\r",
							"pm.environment.set(\"clientEmail_env\",clientEmail);"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"const jsonData = pm.response.json();\r",
							"pm.test(\"status code validation\", () =>{\r",
							"    pm.expect(pm.response.code).to.be.oneOf([200,201]);\r",
							"});\r",
							"pm.test(\"status text validation\", () =>{\r",
							"    pm.expect(pm.response.status).to.eql(\"Created\");\r",
							"});\r",
							"\r",
							"pm.test(\"Response time validation\",()=>{\r",
							"  pm.expect(pm.response.responseTime).to.be.below(1000);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n \"clientName\":\"{{clientname_env}}\",\r\n \"clientEmail\":\"{{clientEmail_env}}\"\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url_books_collect}}/api-clients/",
					"host": [
						"{{url_books_collect}}"
					],
					"path": [
						"api-clients",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "Get list of Books",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const jsonData = pm.response.json();\r",
							"pm.test(\"validation of type of tests in response\",() =>{\r",
							"    pm.expect(jsonData).to.be.an(\"array\");\r",
							"    jsonData.forEach((item) => {\r",
							"        pm.expect(item.id).to.be.a(\"number\");\r",
							"        pm.expect(item.name).to.be.a(\"string\");\r",
							"        pm.expect(item.type).to.be.a(\"string\");\r",
							"        pm.expect(item.available).to.be.an(\"Boolean\");\r",
							"});\r",
							"});\r",
							"\r",
							"pm.test(\"validating json schema\",()=>{ \r",
							"    var schema = { \r",
							"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
							"  \"type\": \"array\",\r",
							"  \"items\": [\r",
							"    {\r",
							"      \"type\": \"object\",\r",
							"      \"properties\": {\r",
							"        \"id\": {\r",
							"          \"type\": \"integer\"\r",
							"        },\r",
							"        \"name\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"type\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"available\": {\r",
							"          \"type\": \"boolean\"\r",
							"        }\r",
							"      },\r",
							"      \"required\": [\r",
							"        \"id\",\r",
							"        \"name\",\r",
							"        \"type\",\r",
							"        \"available\"\r",
							"      ]\r",
							"    }\r",
							"  ]\r",
							"\r",
							"};\r",
							"\r",
							" pm.test(\"json schema validation\",()=>{\r",
							"    pm.expect(tv4.validate(jsonData,schema)).to.be.true;\r",
							" });\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url_books_collect}}/books",
					"host": [
						"{{url_books_collect}}"
					],
					"path": [
						"books"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get single book",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url_books_collect}}/books/3",
					"host": [
						"{{url_books_collect}}"
					],
					"path": [
						"books",
						"3"
					]
				}
			},
			"response": []
		},
		{
			"name": "Submit an Book order",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"var random = Math.random().toString(25).substring(2);\r",
							"\r",
							"var customername= \"Sana\"+random;\r",
							"\r",
							"pm.environment.set(\"random_number\",_.random(1,10));\r",
							"\r",
							"\r",
							"pm.environment.set(\"customername_env\",customername);"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = JSON.parse(responseBody);\r",
							"\r",
							"pm.environment.set(\"orderid_env\",jsonData.orderId);\r",
							"\r",
							"pm.test(\"validation of orderid in repsonse\",()=>{\r",
							"  console.log(jsonData.orderId);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n   \"bookId\":{{random_number}},\r\n    \"customerName\":\"{{customername_env}}\"\r\n\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url_books_collect}}/orders",
					"host": [
						"{{url_books_collect}}"
					],
					"path": [
						"orders"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get all Orders",
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url_books_collect}}/orders",
					"host": [
						"{{url_books_collect}}"
					],
					"path": [
						"orders"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get orderid",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"validation of orderid value from response body\",()=>{\r",
							"  var jsonData = pm.response.json();\r",
							"  pm.expect(jsonData.id).to.eql(pm.environment.get(\"orderid_env\"));\r",
							"  console.log(jsonData.id);\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url_books_collect}}/orders/{{orderid_env}}",
					"host": [
						"{{url_books_collect}}"
					],
					"path": [
						"orders",
						"{{orderid_env}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update an Order",
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n   \r\n    \"customerName\":\"{{customername_env}}\"\r\n\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url_books_collect}}/orders/{{orderid_env}}",
					"host": [
						"{{url_books_collect}}"
					],
					"path": [
						"orders",
						"{{orderid_env}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete order",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.environment.unset(\"id\");\r",
							"pm.environment.unset(\"clientname_env\");\r",
							"pm.environment.unset(\"clientEmail_env\");\r",
							"pm.environment.unset(\"customername_env\");\r",
							"pm.environment.unset(\"orderid_env\");"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{url_books_collect}}/orders/{{orderid_env}}",
					"host": [
						"{{url_books_collect}}"
					],
					"path": [
						"orders",
						"{{orderid_env}}"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "token",
			"value": "24963bf95688dc6258032d0fbd4119562279570b180ea548b55a773f148e803c",
			"type": "string"
		},
		{
			"key": "url_books_collect",
			"value": "https://simple-books-api.glitch.me",
			"type": "string"
		}
	]
}